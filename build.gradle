buildscript {
    apply plugin: 'brazil-gradle'
    dependencies {
        classpath brazilGradle.tool('BrazilGradleQualityDefaults')
        classpath brazilGradle.tool('BrazilGradleValidateClasspathPlugin')
        classpath brazilGradle.tool('BrazilGradleJavaWrapperGenerator')
    }
}

plugins {
    // Java for compile and unit test of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/java_plugin.html
    id 'java'

    // Checkstyle for style checks and reports on Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    id 'checkstyle'

    // JaCoCo for coverage metrics and reports of Java source files. Read more at:
    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
}

apply plugin: 'brazil-validate-classpath'

// BrazilGradleQualityDefaults for enabling brazil specific quality rules and
// reports for other quality plugins. Read more at:
// https://w.amazon.com/bin/view/BrazilGradle/QualityDefaults
apply plugin: 'brazil-quality-defaults'

// BrazilGradleJavaWrapperGenerator to generate the Apollo script. Read more at:
// https://code.amazon.com/packages/BrazilGradleJavaWrapperGenerator/blobs/HEAD/--/README.md
apply plugin: 'brazil-generate-wrapper'

// SpotBugs for quality checks and reports of source files. Read more at:
// https://spotbugs.readthedocs.io/en/stable/gradle.html
apply plugin: 'com.github.spotbugs'

sourceSets.main.java.srcDirs = ['src']
sourceSets.test.java.srcDirs = ['tst']

checkstyle {
    sourceSets = [sourceSets.main]
    ignoreFailures = false
    configFile = file('checkstyle-config.xml')
}

/*
 Configures the JaCoCo "jacoco" plugin. Remove this if you want to skip
 these checks and report generation.

 Set minimum code coverage to fail build, where 0.01 = 1%.
*/
check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            excludes = [
                    '*.dagger.*'
            ]
            limit {
                minimum = 0.00 // TODO: We should change this once we have unit tests
            }
        }
    }
}

dependencies {
    def coralGenerator = brazilGradle.tool('CoralGenerator')
    def coralService = brazilGradle.build('CoralService')
    def coralDagger =  brazilGradle.tool('AmazonCoralDaggerSupportBuildTool')
    annotationProcessor coralGenerator
    annotationProcessor coralService
    testAnnotationProcessor coralGenerator
    testAnnotationProcessor coralService
    annotationProcessor coralDagger
    compileOnly coralDagger

    // Add runtime dependencies to runtime classpath for server task
    runtimeOnly brazilGradle.run() - brazilGradle.build()

    runtimeOnly brazilGradle.run()
    implementation brazilGradle.build()
    testImplementation brazilGradle.testbuild()

    // Lombok build tool
    compileOnly brazilGradle.tool('Lombok')
    // If you need Lombok in unit tests
    testCompileOnly brazilGradle.tool('Lombok')
    annotationProcessor brazilGradle.tool('Lombok')
    testAnnotationProcessor brazilGradle.tool('Lombok')
}

spotbugs {
    ignoreFailures.set(false)
}

test {
    useJUnitPlatform()
}

/*
 Put coral generated source in different directory to avoid adding to jar.
*/
compileJava {
    File generatedSourceDir = file("${brazilGradle.buildDir}/private/generated/src/main")
    options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
    outputs.dir(generatedSourceDir)
}

// This is needed to resolve a classPath issue with Bobcat3 and Dagger
configurations {
    implementation {
        exclude group: 'javax.annotation', module: 'jsr250-api'
    }
}

def configurationFiles = copySpec {
    from("${brazilGradle.path('package-src-root')}/configuration") {
        include 'brazil-config/**/*'
        include 'ApolloCmd/**/*'
        include 'log-configuration/**/*'
        include 'monitoring/**/*'
    }
}

def copyConfigurationToBuild = tasks.register('copyConfigurationToBuild', Copy) {
    from("${brazilGradle.path('package-src-root')}") {
        include 'MockPlacementData.json'
    }
    into "${brazilGradle.buildDir}"
    with configurationFiles
}


def copyConfigurationToBuildPrivate = tasks.register('copyConfigurationToBuildPrivate', Copy) {
    from(brazilGradle.path('run.configfarm.brazil-config')) {
        include 'brazil-config/**/*'
    }
    from(brazilGradle.path('run.configfarm.certs')) {
        include 'certs/**/*'
    }
    from("${brazilGradle.path('package-src-root')}") {
        include 'MockPlacementData.json'
    }
    into "${brazilGradle.buildDir}/private"
    with configurationFiles
}

def httpPort = '8000'
def httpsPort = '8001'

/*
 Generate the Apollo script to start your service.
 Note: When modifying values here remember to also update the server target.
*/
def apolloScript = tasks.register('apolloScript', com.amazon.brazil.gradle.launcher.GenerateWrapperTask) {
    target "$brazilGradle.buildDir/bin/run-service.sh"
    main 'com.amazonaws.ebsblacksmithservice.dagger.GeneratedCoralLauncher'

    jvmArgs '-ea'
    jvmArgs '-XX:+UseG1GC'
    jvmArgs '-XX:MaxGCPauseMillis=100'
    jvmArgs '-XX:+PerfDisableSharedMem'
    // Kill on OOM (logscan for PMAdmin.log will trigger an alarm)
    jvmArgs '-XX:+ExitOnOutOfMemoryError'

    environment 'CORAL_CONFIG_PATH', '${ENVROOT}/coral-config', false

    systemProperty 'javax.net.ssl.trustStore', 'certs/InternalAndExternalTrustStore.jks'
    systemProperty 'javax.net.ssl.trustStorePassword', 'amazon'

    /*
     Idle client connections are closed after 20 seconds. The current
     default idle connection timeout for netscaler VIPs is 180 seconds,
     meaning idle client connections will close before a VIP reaps the
     connection from its idle connection pool. In general, this prevents
     connections from going stale and removes the need to check for
     stale connections. Stale connection checking has
     been disabled for the BSFJavaClient in brazil config.
    */
    systemProperty 'timeout.close.idle.connections', '20'

    systemProperty 'log4j.configurationFile', 'file:${ENVROOT}/log-configuration/log4j2-${DOMAIN}.xml', false
    systemProperty 'java.util.logging.manager', 'org.apache.logging.log4j.jul.LogManager'
    systemProperty 'Log4jContextSelector', 'org.apache.logging.log4j.core.async.AsyncLoggerContextSelector'
    systemProperty 'root', '${ENVROOT}', false

    args '--root=${ROOT}', false
    args '--domain=${DOMAIN}', false
    args '--realm=${REALM}', false
}

/*
 Launch the coral server
 Note: When modifying values here remember to also update the apolloScript target.
*/
def server = tasks.register('server', JavaExec) {
    dependsOn copyConfigurationToBuildPrivate
    classpath sourceSets.main.runtimeClasspath
    main 'com.amazonaws.ebsblacksmithservice.dagger.GeneratedCoralLauncher'

    /*
     Set to true to enable remote debugging  on port 5005 of your `bb server`.
     For more information, see https://docs.gradle.org/current/dsl/org.gradle.api.tasks.JavaExec.html#org.gradle.api.tasks.JavaExec:debug
    */
    debug false

    environment 'CORAL_CONFIG_PATH', brazilGradle.path('run.coralconfig')
    environment 'LD_LIBRARY_PATH', brazilGradle.path('run.lib')

    systemProperty 'javax.net.ssl.trustStore', "${brazilGradle.buildDir}/private/certs/InternalAndExternalTrustStore.jks"
    systemProperty 'javax.net.ssl.trustStorePassword', "amazon"
    systemProperty 'java.util.logging.manager', "org.apache.logging.log4j.jul.LogManager"
    systemProperty 'Log4jContextSelector', "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector"
    systemProperty 'log4j.configurationFile', "${brazilGradle.path('package-src-root')}/configuration/log-configuration/log4j2-test.xml"
    systemProperty 'apollo.OCF.HttpServer.httpRegularPort', "${httpPort}"
    systemProperty 'apollo.OCF.HttpServer.httpSecurePort', "${httpsPort}"
    systemProperty 'java.io.tmpdir', "${brazilGradle.buildDir}/private/var/tmp"

    /*
     Below properties are required by AmazonCoralDaggerSupportBuildTool
     They will be used in 'brazil-build server' for simulate Apollo environment
     see https://code.amazon.com/packages/AmazonCoralDaggerSupportBuildTool/blobs/mainline/--/README.md
    */
    systemProperty 'apollo.environment.environmentFullName', "EbsBlacksmithService"
    systemProperty 'apollo.environment.environmentAlias', "EbsBlacksmithService"
    systemProperty 'apollo.environment.stage', "Alpha"
    systemProperty 'apollo.OCF.AppConfig.app', "EbsBlacksmithService"
    systemProperty 'apollo.OCF.AppConfig.appgroup', "EbsBlacksmithService"
    systemProperty 'apollo.OCF.PubSub.domain', "desktop"
    systemProperty 'apollo.OCF.PubSub.realm', "IAD7"
    systemProperty 'apollo.OCF.EBSZoneAndRegion.EBSZoneAndRegion.subzone', "IAD7"

    /*
     For local testing only: disable AAA authorization (a manual kill switch; see CoralModule.java). Remove
     this after you register with AAA, deploy the consumable environment, set up AAAWorkspaceSupport, etc.
     For more information, see https://w.amazon.com/index.php/AAA/Guide/Onboarding/AAASecurityDaemon/Guide/Integrate.
    */
    systemProperty 'disable.aaa.authorization', "true"

    jvmArgs '-ea'
    jvmArgs "-Xmx256M"
    jvmArgs "-Djava.net.preferIPv4Stack=true"
    jvmArgs "-Dsun.net.inetaddr.ttl=60"
    jvmArgs "-Dsun.net.inetaddr.negative.ttl=1"
    jvmArgs "-XX:+UseG1GC"
    jvmArgs "-XX:MaxGCPauseMillis=100"
    jvmArgs "-Droot=${brazilGradle.buildDir}/private"

    args "--root=${brazilGradle.buildDir}/private"
    args "--domain=test"
    args "--realm=us-west-2"
}

// Generate configuration files via RIPConfigBuilder
def ripConfigBuilderPackage = 'RIPConfigBuilder-2.0'
if (!brazilGradle.path("[RIPConfigBuilder]pkg.configfarm.bin").contains("[${ripConfigBuilderPackage}]")) {
    throw new AssertionError("Expected to depend on ${ripConfigBuilderPackage}")
}

def generateOpConfig = tasks.register('generateOpConfig', Exec) {
    def brazilBootstrapPath = "which brazil-bootstrap".execute().text.trim()
    if (!brazilBootstrapPath) {
        brazilBootstrapPath = '/apollo/env/SDETools/bin/brazil-bootstrap'
    }
    def brazilBootstrap = file(brazilBootstrapPath)
    def ripConfigBuilderRoot = new ByteArrayOutputStream()
    exec {
        commandLine brazilBootstrap.toString(),
                '-p', ripConfigBuilderPackage
        standardOutput = ripConfigBuilderRoot
    }

    workingDir brazilGradle.buildDir
    //
    commandLine "${ripConfigBuilderRoot.toString().trim()}/bin/generate_configs.rb",
            '--template_dir', "${project.projectDir}/configuration/template",
            '--output_dir', "${project.projectDir}/configuration"
}

tasks.named("copyConfigurationToBuild").configure {
    dependsOn generateOpConfig
}

tasks.named("copyConfigurationToBuildPrivate").configure {
    dependsOn generateOpConfig
}

tasks.named("build").configure {
    dependsOn generateOpConfig, copyConfigurationToBuild, apolloScript
}
