# ALL_REGIONS=true
# TARGET_SERVICE = ebs

################################
# List what opconfig to inject #
################################

*.*.OpConfigInjector.OpConfigList += (
    "PubSub",
    "HttpServer",
    "ProcessManager",
    "LogPuller",
    "EBSZoneAndRegion",
    "CloudWatchInternalAgent",
    "Heimdall"
);

# OpConfigList for IDM as we want to have STACK_ID in EBSZoneAndRegion config set which is only set in IDM apollo-shim
ec2.*.OpConfigInjector.OpConfigList += (
    "PubSub",
    "HttpServer",
    "ProcessManager",
    "LogPuller"
);

*.*.OpConfigInjector.Config.PubSub = {
    realm = "$REALM$";
    domain = "$DOMAIN$";
};

*.*.OpConfigInjector.Config.HttpServer += {
    httpSecurePort = "8443";
    httpRegularPort = "8080";
};

*.*.OpConfigInjector.Config.ProcessManager = {
    overrideFile = ("OctaneProcessManagerOverrides.cfg", "CWInternalAgent.cfg");
};

*.*.OpConfigInjector.Config.LogPuller = {
    action = local;
    frequency = hourly;
    timezone = Universal;
    diskRetention = 14;
};

*.*.OpConfigInjector.Config.LogPuller.logNames = (
    "application.log",
    "log-remover.log",
    "log-rotator.log",
    "service_log",
    "processmanager.log",
    "website-log-pusher.log"
);

*.*.OpConfigInjector.Config.LogPuller.processmanager.log += {
    # processmanager.log is rotated daily, not hourly
    frequency = daily;
};

# EBSZoneAndRegion Configs for Gamma
gamma.*.OpConfigInjector.Config.EBSZoneAndRegion = {
    EBSZoneAndRegion.awspublicregion = "us-east-1";
    EBSZoneAndRegion.awsregion = "IAD";
    EBSZoneAndRegion.ec2availabilityzone = "IAD7";
    EBSZoneAndRegion.subzone = "IAD7";
};

# Monitoring.TSD Configs for Beta/Gamma
beta.*.OpConfigInjector.Config.Monitoring.TSD = {
    PerformanceStreamDataset = "Test:Prod";
    PerformanceStreamDestination = "IAD";
};

gamma.*.OpConfigInjector.Config.Monitoring.TSD = {
    PerformanceStreamDataset = "Test:Prod";
    PerformanceStreamDestination = "IAD";
};

# CloudWatchInternalAgent configs for gamma
gamma.*.OpConfigInjector.Config.CloudWatchInternalAgent = {
    ConfigFileName = "amazon-cloudwatch-agent.json";
    CredentialsFilePath = "/var/ebs/turtle_creds/EbsBlacksmithService_EbsBlacksmithServiceCloudWatchAgentRole-v0-gamma_$DOMAIN$/credentials";
    OdinMaterialSetName = "default";
    Region = "us-east-1";
    RoleARN = "default";
};

# Heimdall configs for gamma
gamma.*.OpConfigInjector.Config.Heimdall = {
    EC2Region = iad;
    Stage = gamma;
    EnvironmentName = "EbsBlacksmithServiceGamma";
};

# Configs for prod
<% @regions.each do |region| %>
  <% region.availability_zones.each do |zone|
    airport_code = region.airport_code.downcase
    public_region = region.region_name.downcase
    zone_name = zone.name.downcase
  %>

    prod.<%= zone_name %>.OpConfigInjector.Config.EBSZoneAndRegion += {
      EBSZoneAndRegion.awspublicregion = "<%= public_region %>";
      EBSZoneAndRegion.awsregion = "<%= airport_code.upcase %>";
      EBSZoneAndRegion.ec2availabilityzone = "<%= zone_name.upcase %>";
      EBSZoneAndRegion.subzone = "<%= zone_name.upcase %>";
    };

    prod.<%= zone_name %>.OpConfigInjector.Config.CloudWatchInternalAgent = {
        ConfigFileName = "amazon-cloudwatch-agent.json";
        CredentialsFilePath = "/var/ebs/turtle_creds/EbsBlacksmithService_EbsBlacksmithServiceCloudWatchAgentRole-v0-prod_$DOMAIN$/credentials";
        OdinMaterialSetName = "default";
        Region = "<%= public_region %>";
        RoleARN = "default";
    };

    prod.<%= zone_name %>.OpConfigInjector.Config.Heimdall += {
        EC2Region = "<%= region.region_name -%>";
        Stage = "prod";
        EnvironmentName = "EbsBlacksmithService";
    };
  <% end %>
<% end %>
